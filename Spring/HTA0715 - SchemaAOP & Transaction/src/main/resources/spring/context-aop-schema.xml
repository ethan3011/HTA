<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd">
		
	<!-- propertise 파일을 읽어온다. -->
	<context:property-placeholder location="classpath:/spring/*.properties"/>
	
	<!-- com.sample.service와 com.sample.advice에 있는 component들을 스캔한다. -->
	<context:annotation-config />
	<context:component-scan base-package="com.sample.service" />
	<context:component-scan base-package="com.sample.advice" />
	
	<!-- DBCP 커넥션 풀 객체로 DB와 연결한다. -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
			p:driverClassName="${db.driverClassname}"
			p:url="${db.url}"
			p:username="${db.username}"
			p:password="${db.password}" />
			
	<!-- sqlSessionFactory를 획득하고 설정한다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
			p:dataSource-ref="dataSource"
			p:configLocation="classpath:/mybatis/mybatis-config.xml"
			p:mapperLocations="classpath:/mybatis/mappers/*.xml" />
			
	<!-- com.sample.mapper에 있는 인터페이스를 sqlSessionFacotry와 연결한다. -->
	<mybatis-spring:scan base-package="com.sample.mapper" factory-ref="sqlSessionFactory"/>
	
	<!-- xmlSchemaUsingAdvice의 경로를 id에 myAdvice로 설정한다. -->
	<bean id="myAdvice" class="com.sample.advice.XmlSchemaUsingAdvice" />
	
	
	<!-- aop:config 로 schema형식에 환경설정을 한다. -->
	<aop:config>
		<!-- pointcut 조건(위치)을 설정하고 id를 servicePointcut -->
		<aop:pointcut expression="execution(* com.sample.service.*Service.*(..))" id="servicePointcut"/>
		<!-- aspect를 사용한다. ref로 경로를 위에 설정해둔 myAdvice를 넣는다. -->
		<aop:aspect ref="myAdvice">
			<!-- beforeTargetMethod를 메소드명으로 설정하고 pointcut-ref로 경로를 설정한다. -->
			<aop:before method="beforeTargetMethod" pointcut-ref="servicePointcut" />
			
			<!-- afterReturningtargetMethod를 메소드명을 설정하고 pointcut-ref로 경로를 설정한다. returning="returnValue"으로 리턴값을 설정한다. -->
			<aop:after-returning method="afterReturningTargetMethod" pointcut-ref="servicePointcut" returning="returnValue"/>
			
			<!-- afterThrowingTargetMethod를 메소드명으로 설정하고 pointcut-ref로 경로를 설정한다. throwing="exception"으로 예외를 설정한다. -->
			<aop:after-throwing method="afterThrowingTargetMethod" pointcut-ref="servicePointcut" throwing="exception"/>
			
			<!-- afterTargetMethod로 메소드명으로 설정하고 pointcut-ref로 경로를 설정한다. -->
			<aop:after method="afterTargetMethod" pointcut-ref="servicePointcut"/>
			
			<!-- aroundTargetMetthod를 메소드명으로  설정하고 pointcut-ref로 경로를 설정한다.-->
			<aop:around method="aroundTargetMethod" pointcut-ref="servicePointcut"/>
		
		</aop:aspect>
	</aop:config>
</beans>