-- 테이블 조회하기
-- 사원아이디, 사원명, 소속부서아이디, 소속부서명
-- employees 테이블 -> 사원아이디, 사원명, 소속부서아이디
-- departments 테이블 -> 소속부서명 
select E.employee_id, E.first_name,
       D.department_id, D.department_name
from employees E, departments D
where E.department_id = D.department_id;


-- 테이블 조인하기
-- 사원아이디, 이름, 직종아이디, 급여, 직종제목, 직종 최소 급여, 직종 최대 급여 조회하기
-- employees 테이블 -> 사원아이디, 이름, 직종아이디, 급여
-- jobs 테이블 -> 직종아이디, 직종제목, 직종 최저급여, 직종 최고급여
select E.employee_id, E.first_name, E.job_id, E.salary,
       J.min_salary, J.max_salary
from employees E, Jobs J
where E.job_id = J.job_id;

-- 테이블 조인하기
-- 부서아이디, 부서명, 소재지 아이디, 소재지 주소, 소재지 도시명 조회하기
-- departments -> 부서아이디, 부서명, 소재지아이디
-- locations -> 소재지 주소, 소재지 도시명
select D.department_id, D.department_name,
       L.street_address, l.city
from departments D, locations L
where D.location_id = L.location_id;


-- 테이블 조인하기
-- 부서관리자가 지정되어 있는 부서의 부서아이디, 부서명, 부서관리자 아이디, 부서관리자 이름 조회하기
-- departments -> 부서아이디, 부서명, 부서관리자아이디
-- employees -> 부서관리자이름(사원이름)
-- departments의 manager_id는 부서관리자로 지정된 사원의 사원아이디다.
-- departments의 manager_id와 동일한 사원아이디를 가진 사원정보가 조인되어야한다.
select D.department_id, D.department_name, D.manager_id, E.first_name
from departments D, employees E
where D.manager_id = E.employee_id;

-- 3개 이상의 테이블 조인하기
-- 사원아이디, 사원이름, 직종아이디, 급여, 직종최저급여, 직종최고급여, 소속부서 아이디, 부서명
-- employees -> 사원아이디, 사원이름, 직종아이디, 급여, 소속부서아이디
-- jobs -> 직종최저급여, 직종최고급여
-- departments -> 부서명
select E.employee_id, E.first_name, J.job_id, E.salary, J.min_salary, J.max_salary, D.department_id, D.department_name
from employees E, jobs J, departments D
where E.job_id = J.job_id
and E.department_id = D.department_id;


-- 100번 사원의 이름, 전화번호, 이메일, 
-- 소속부서아이디, 소속부서명, 소속부서 도시명, 소속부서 소재지주소 조회하기
select E.first_name, E.phone_number, E.email,
       D.department_id, D.department_name,
       L.city, L.street_address
from employees E, departments D, Locations L
where employee_id = 100
and E.department_id = D.department_id
and D.location_id = L.location_id;


-- 50번 부서에 소속된 사원들의 사원아이디, 이름, 직종아이디, 직종제목 조회하기
-- 사원아이디, 이름, 직종아이디 --> employees
-- 직종제목 --> jobs
select E.employee_id, E.first_name, J.job_id, J.job_title
from employees E, jobs J
where e.department_id = 50
and E.job_id = J.job_id;


-- 급여를 15000이상 받은 사원들의 이름, 직종아이디, 급여, 부서명을 조회하기
-- 급여를 15000이상, 급여, 이름, 직종아이디 -> employees
-- 부서명 --> departments
select E.first_name, E.job_id, E.salary, D.department_name
from employees E, departments D
where E.salary >= 15000
and E.department_id = D.department_id;


-- 100 직원이 관리하는 사원들의 이름, 직종아이디, 직종제목, 부서아이디, 부서명 조회하기
-- 100번 직원, 이름, 직종아이디, 부서아이디 --> employees
-- 직종제목 --> jobs
-- 부서명 --> departments
select E.first_name,
       J.job_id, J.job_title,
       D.department_id, D.department_name
from employees E, jobs J, departments D
where E.manager_id = 100
and   E.job_id = J.job_id
and   E.department_id = D.department_id;


2.select문 join 퀴즈
-- 모든 사원들의 사원아이디, 이름, 소속부서아이디, 소속부서명을 조회하기
select E.employee_id, E.first_name, D.department_id, D.department_name
from employees E, departments D
where E.department_id = D.department_id;

-- 모든 사원들의 사원아이디, 이름, 직종아이디, 직종제목을 조회하기
select E.employee_id, E.first_name, J.job_id, J.job_title
from employees E, jobs J
where E.job_id = J.job_id;

-- 사원들 중에서 소속부서가 정해지지 않는 사원의 아이디, 이름, 급여, 직종, 직종최소급여, 직종최대급여를 조회하기
select E.employee_id, E.first_name, E.salary,
       J.job_id, J.min_salary, J.max_salary
from employees E, jobs J
where E.department_id is null
and   E.job_id = J.job_id;

-- 2007년에 입사한 사원들의 사원아이디, 이름, 소속부서아이디, 소속부서명을 조회하기
select E.employee_id, E.first_name,
       D.department_id, d.department_name
from employees E, departments D
where (substr(E.hire_Date,1,2) = '07'
and E.department_id = D.department_id);

-- 커미션을 받은 사원들의 사원아이디, 이름, 직종, 직종제목, 소속부서아이디, 소속부서명을 조회하기
select E.employee_id, E.first_name, J.job_id, J.job_title, D.department_id, D.department_name
from employees E, jobs J, departments D
where E.commission_pct is not null
and E.job_id = J.job_id
and E.department_id = D.department_id;

-- 직종최소급여가 10000달러 이상인 직종에 종사하고 있는 사원들의 아이디, 이름, 직종아이디, 급여를 조회하기
select E.employee_id, E.first_name, J.job_id, E.salary
from employees E, Jobs J
where J.min_salary >= 10000
and E.job_id = J.job_id;

-- 모든 사원들의 사원아이디, 이름, 소속부서아이디, 소속부서명, 해당부서의 소재지 도시 및 주소를 조회하기
select E.employee_id, E.first_name, D.department_id, D.department_name, L.city, L.street_address
from employees E, departments D, locations L
where E.department_id = D.department_id
and   D.location_id = L.location_id;

-- 모든 사원들의 사원아이디, 이름, 직종아이디, 직종제목, 소속부서아이디, 소속부서명, 해당부서의 소재지 도시 및 주소
select E.employee_id, E.first_name, J.job_id, J.job_title, D.department_id, D.department_name, L.city, L.street_address
from employees E, jobs J, Departments D, Locations L
where E.job_id = J.job_id
and E.department_id = D.department_id
and D.location_id = L.location_id;

-- 부서 소재지 국가가 미국에 위치하고 있는 부서의 부서아이디, 부서명, 도시명을 조회하기 
select D.department_id, D.department_name, L.city
from departments D, locations L
where L.country_id = 'US'
and D.location_id = L.location_id;

-- 'Seattle'에서 근무하고 있는 사원들의 사원아이디, 이름, 부서아이디, 부서명을 조회하기
select E.employee_id, E.first_name, D.department_id, D.department_name
from employees E, departments D, Locations L
where L.city = 'Seattle'
and   E.department_id = D.department_id
and   D.location_id = L.location_id;

-- 2006년에 job이 변경된 기록이 있는 사원들의 사원아이디, 이름, 직종아이디를 조회하기
select E.employee_id, E.first_name, E.job_id
from employees E, job_history JB
where (substr(JB.start_date,1,2)  = '06' or substr(JB.end_date,1,2) = '06')
and E.employee_id = JB.employee_id;


-- 이전에 50번 부서에서 근무한 적이 있는 사원들의 사원아이디, 이름, 근무시작일, 근무종료일, 근무당시 직종아이디를 조회하기
select E.employee_id, E.first_name, JB.start_date, JB.end_date, JB.job_id
from employees E, job_history JB
where JB.department_id = 50
and E.employee_id = JB.employee_id;

-- 사원들 중에서 자신이 근무하고 있는 직종의 최소급여와 최대급여의 평균값도 적은 급여를 받는 
-- 사원의 아이디, 이름, 직종아이디, 급여, 최소급여, 최대급여, 최소/최대급여 평균값을 조회하기
-- (평균값은 (최소급여+최대급여)/2로 구한다)
select E.employee_id, E.first_name, E.job_id, E.salary, J.min_salary, J.max_salary, trunc((select avg(min_salary) from jobs) + (select avg(max_salary) from jobs))/2 min_max_average
from employees E, jobs J
where E.job_id = J.job_id
and E.salary <= trunc((select avg(min_salary) from jobs) + (select avg(max_salary) from jobs))/2;