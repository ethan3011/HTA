Oracle Database 11g + Oracle SQL Developer
-- 반올림
select round(1.4),round(1.7), round(-2.6)
from dual;
-- 소수점 절사
select trunc(123.45678),
trunc(-12321415.12478912497237956412567, 3)as a,
trunc(-12321415.12478912497237956412567, 2)as s,
trunc(-12321415.12478912497237956412567, 1)as d,
trunc(-12321415.12478912497237956412567, 0)as f,
trunc(-12321415.12478912497237956412567, -1)as g,
trunc(-12321415.12478912497237956412567, -2)as h,
trunc(-12321415.12478912497237956412567, -3)as j
from dual;
-- 지정된 숫자보다 같거나 큰 정수 중에서 가장 작은 정수 반환
select ceil(15.7)
from dual;
-- 지정된 숫자보다 같거나 작은 정수 중에서 가장 큰 정수 반환
select floor(-55.1)
from dual;

-- 시스템의 현재 날짜, 시간정보를 반환한다.
select sysdate
from dual;
-- 두 날짜간의 개월 수 반환
select hire_date, round(months_between(sysdate, hire_date))as months_till_now
from employees;

-- date + 정수
select '4' + 3
from dual;
-- date - 정수
select '84'-14
from dual;
-- date - date
select to_date(to_char(sysdate,'YYYYMMDD'))-to_date(20200921)
from dual;
-- 60번 부서에 소속된 사원들이 해당 직종의 근무일수 계산
select first_name, hire_date, round(sysdate-hire_date)
from employees
where department_id = 60;

-- 지정된 날짜를 기준으로 가장 최근 요일의 날짜를 반환
select next_day(sysdate,'금')
from dual;

-- 기념일 계산하기
select round(to_date(to_char(sysdate, 'YYYYMMDD'))-to_date(19940201))
from dual;

-- employees 테이블에서 사원아이디, 이름, 급여, 커미션이 적용된 급여를 조회하기
select employee_id, first_name, salary, nvl(salary+(salary*commission_pct), salary) as salary_with_commission
from employees;

-- employees 테이블에서 사원아이디, 이름, 급여, 커미션(급여에 대한 실제 커미션금액)을 조회하기
select employee_id, first_name, salary, nvl(commission_pct*salary,0)
from employees;

-- employees에서 소속부서번호가 10, 20, 30에 해당하는 사원들의
-- 사원아이디, 이름, 부서아이디, 급여, 보너스를 조회하기
-- (부서번호가 30인 부서에 소속된 사원들은 급여의 20%를 보너스로 지급하도록 조회하기)
select employee_id, first_name, department_id, salary, salary*0.2 as bonus
from employees
where department_id in (10,20,30);

-- employees에서 소속부서아이디가 10,20,30에 해당하는 사원들의
-- 사원아이디, 이름, 부서아이디, 급여, 보너스를 조회하기
-- (10번 부서는 급여의 10%, 20번 부서는 급여의 20%, 30번 부서는 급여의 30%를 보너스로 지급)
select employee_id, first_name, department_id, salary,
decode(department_id,10,salary*0.1,
                     20,salary*0.2,
                     30,salary*0.3) as bonus
from employees
where department_id in (10,20,30);

-- employees테이블에서 직종아이디에 CLERK가 포함되어 있는 일반 사원들인 경우
-- 전체 평균급여의 50%를 보너스로 지급하고, 그외는 전체 평균급여의 30%를 보너스로 지급할 예정이다.
-- 사원아이디, 이름, 직종, 보너스를 출력하기
select employee_id, first_name, job_id, 
    decode(substr(job_id,4),'CLERK',trunc((select avg(salary)/2 from employees)),
                                    trunc((select avg(salary)*0.3 from employees))) as bonus
from employees;


-- employees 테이블에서 급여를 20000달러 이상 받는 경우 급여의 10%를 보너스로 지급하고,
--                           10000달러 이상 받는 경우 급여의 30%를 보너스로 지급하고,
--                            5000달러 이상 받는 경우 급여의 50%를 보너스로 지급하고,
--                                           그 외는 급여의 75%를 보너스로 지급한다.
-- 사원아이디, 이름, 급여, 보너스를 조회하기(보너스는 10의 자리에서 반올림한다.)
select employee_id, first_name, salary, 
    round(case
        when salary>=20000 then salary*0.1
        when salary>=10000 then salary*0.3
        when salary>=5000 then salary*0.5
        else salary*0.75
        end, -2) as bonus
from employees;

-- employees 테이블에 저장된 사원들의 급여를 기준으로 등급을 조회하려고 한다.
-- 급여가 20000이상인 경우 A, 10000이상인 경우 B, 5000이상인 경우 C, 
--       2500이상인 경우 D, 그 외는 E등급으로 판정한다.
-- 사원아이디, 이름, 급여, 급여등급을 조회하기
select employee_id, first_name, salary, 
    case
        when salary>=20000 then 'A'
        when salary>=10000 then 'B'
        when salary>=5000 then 'C'
        when salary>=2500 then 'D'
        else 'E'
    end as salary_grade
from employees;

-- employees 테이블에서 관리자(상사)의 사원아이디를 중복없이 조회하기
select manager_id
from employees
where manager_id is not null
union
select manager_id
from employees
where manager_id is not null;

-- employees 테이블에 등록된 사원들이 소속된 부서아이디를 중복없이 조회하기
-- (소속부서가 없는 사원은 제외시킨다.)
select department_id
from employees
where department_id is not null
union
select department_id
from employees
where department_id is not null;

-- employees 테이블에서 사원아이디, 이름, 이메일을 조회하기(이메일은 소문자로 표시)
select employee_id, first_name, lower(email)
from employees;

-- employees 테이블에서 이름이 A로 시작하는 사원의 아이디, 이름을 조회하기
select employee_id, first_name
from employees
where first_name like 'A%';

-- employees 테이블에서 모든 사원들의 아이디, 이름, 급여, 연간 총 수입을 조회하기
-- 연간 총수입은 급여*12 + (급여*12*commission_pct)다.
select employee_id, first_name, salary, nvl((salary*12)+((salary*commission_pct)*12), salary*12) as yearIncome
from employees;

-- employees 테이블에서 80번 부서에서 근무중인 사원들의 사원아이디, 이름, 급여, 세금을 조회하기
-- 14000이상 45%, 10000이상 42%, 7500이상 35%, 5000이상 25%, 2000이상 9%, 그외는 0%다.
select salary, round(case
            when salary>=14000 then salary*0.45
            when salary>= 10000 then salary*0.42
            when salary>= 7500 then salary*0.35
            when salary>= 5000 then salary*0.25
            when salary>= 2000 then salary*0.09
            else 0
        end) as tax
from employees;

-- employees 테이블에서 50번 부서에서 근무중이 사원들의 급여를 15% 인상했을 때,
-- 사원아이디, 이름, 인상전 급여, 인상된 급여, 인상된 급여와 인상전 급여의 차이를 조회하기
select employee_id, first_name, salary as 인상전, round(salary+salary*0.15) as 인상후, round((salary*1.15)-salary) as 인상된급여
from employees;

-- employees 테이블에서 사원의 이름이 'A', 'J' 또는 'M'으로 시작하는 사원의 아이디, 이름을 조회하기
select employee_id, first_name
from employees
where first_name like 'A%' or
      first_name like 'J%' or
      first_name like 'M%'
order by first_name asc;


-- employees 테이블에서 근무를 시작한 날로부터 오늘까지 근무한 개월수를 계산해서 조회하기
-- 사원아이디, 이름, 입사일, 근무한 개월수(개월수는 정수로 반올림한다.)만 조회한다.
select employee_id, first_name, hire_date, round(months_between(sysdate, hire_date)) as 근무개월수
from employees;

-- employees 테이블에서 사원들의 급여를 *의 갯수로 표시하려고 한다.
-- *하나가 1000달러를 나타낸다고 했을 때, 사원의 아이디, 이름, 급여, *을 표시하기
-- 100 홍길동 3400  ***
-- 101 김유신 15000 ***************
-- 102 강감찬 7300  *******

select employee_id, first_name, salary, lpad(' ', (salary/1000)+1, '*') as 천
from employees;